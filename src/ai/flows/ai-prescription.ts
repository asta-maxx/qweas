// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview An AI-powered prescription generator.
 *
 * - generatePrescription - A function that handles the prescription generation process.
 * - GeneratePrescriptionInput - The input type for the generatePrescription function.
 * - GeneratePrescriptionOutput - The return type for the generatePrescription function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GeneratePrescriptionInputSchema = z.object({
  condition: z.string().describe('The diagnosed medical condition.'),
  patientDetails: z.string().describe('Details about the patient, including age, weight, and allergies.'),
});
export type GeneratePrescriptionInput = z.infer<typeof GeneratePrescriptionInputSchema>;

const GeneratePrescriptionOutputSchema = z.object({
  possiblePrescriptions: z.array(
    z.object({
      medicationName: z.string().describe('The name of the medication.'),
      dosage: z.string().describe('The recommended dosage of the medication.'),
      instructions: z.string().describe('Specific instructions for taking the medication.'),
      rationale: z.string().describe('Rationale of why the prescription is appropriate for this patient and condition')
    })
  ).describe('A list of possible prescriptions for the condition.'),
  disclaimer: z.string().describe('A disclaimer that this is not a substitute for professional medical advice.'),
});
export type GeneratePrescriptionOutput = z.infer<typeof GeneratePrescriptionOutputSchema>;

export async function generatePrescription(input: GeneratePrescriptionInput): Promise<GeneratePrescriptionOutput> {
  return generatePrescriptionFlow(input);
}

const searchMedicalDatabase = ai.defineTool({
  name: 'searchMedicalDatabase',
  description: 'Search a medical database for information about possible prescriptions for a given condition and patient details.',
  inputSchema: z.object({
    condition: z.string().describe('The diagnosed medical condition.'),
    patientDetails: z.string().describe('Details about the patient, including age, weight, and allergies.'),
  }),
  outputSchema: z.string().describe('Information about possible prescriptions for the condition.'),
},
async input => {
  // TODO: Implement the search of a medical database here.
  // This is a placeholder; replace it with actual data retrieval.
  return `Placeholder: Information about possible prescriptions for ${input.condition} given patient details: ${input.patientDetails}`;
});

const prompt = ai.definePrompt({
  name: 'generatePrescriptionPrompt',
  input: {
    schema: z.object({
      condition: z.string().describe('The diagnosed medical condition.'),
      patientDetails: z.string().describe('Details about the patient, including age, weight, and allergies.'),
    }),
  },
  output: {
    schema: z.object({
      possiblePrescriptions: z.array(
        z.object({
          medicationName: z.string().describe('The name of the medication.'),
          dosage: z.string().describe('The recommended dosage of the medication.'),
          instructions: z.string().describe('Specific instructions for taking the medication.'),
          rationale: z.string().describe('Rationale of why the prescription is appropriate for this patient and condition')
        })
      ).describe('A list of possible prescriptions for the condition.'),
      disclaimer: z.string().describe('A disclaimer that this is not a substitute for professional medical advice.'),
    }),
  },
  prompt: `You are an AI assistant that provides possible prescriptions for a given medical condition.

  Based on the condition and patient details, suggest possible prescriptions. Use the searchMedicalDatabase tool to get information about possible prescriptions.

  Condition: {{{condition}}}
  Patient Details: {{{patientDetails}}}

  Make sure to add a disclaimer that this is not a substitute for professional medical advice.

  Include the medication name, dosage, and instructions for taking the medication. Also include a rationale as to why each prescription is appropriate for this patient and condition.
`,
  tools: [searchMedicalDatabase]
});

const generatePrescriptionFlow = ai.defineFlow<
  typeof GeneratePrescriptionInputSchema,
  typeof GeneratePrescriptionOutputSchema
>({
  name: 'generatePrescriptionFlow',
  inputSchema: GeneratePrescriptionInputSchema,
  outputSchema: GeneratePrescriptionOutputSchema,
}, async input => {
  const medicalInfo = await searchMedicalDatabase(input);
  const {output} = await prompt(input);

  return {
    possiblePrescriptions: output?.possiblePrescriptions || [],
    disclaimer: 'This is not a substitute for professional medical advice. Please consult with a healthcare provider for any medical concerns.',
  };
});
